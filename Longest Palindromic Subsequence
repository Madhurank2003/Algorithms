#include<bits/stdc++.h>
using namespace std;
int lps(string& str,int i, int j){
    if(i==j)    return 1;
    if(i>j) return 0;
    if(str[i]==str[j]){
        return 2 + lps(str,i+1,j-1);
    }
    else{
        return max(lps(str,i+1,j),lps(str,i,j-1));
    }
}
int main(){
    cout<<"Longest Palindromic Subsequence\n";
    cout<<"Enter a String\n";
    string str;
    cin>>str;
    int n = str.size();
    //int res = lps(str,0,n-1);
    
    int dp[n+1][n+1];
    memset(dp,0,sizeof(dp));
    
    
    for(int j=1;j<=n;j++){
        for(int i=n-1;i>=0;i--){
            if(str[i]==str[j-1]){
                dp[i][j] = 1 + dp[i+1][j-1];
            }
            else{
                dp[i][j] = max(dp[i][j-1],dp[i+1][j]);
            }
        }
    }
    string res="";
    int i=0,j=n;
    while(i<n && j>=1){
        if(str[i]==str[j-1]){
            res+=str[i];
            i++;
            j--;
        }
        else if(dp[i][j-1]>dp[i+1][j]){
            j--;
        }
        else{
            i++;
        }
    }
    int resLen = dp[0][n];
    cout<<"Longest Palindromic Subsequence : "<<res<<" "<<resLen<<endl;
    return 0;
}
